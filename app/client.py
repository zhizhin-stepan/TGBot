import os
import httpx

CHAT_API_URL = "http://localhost:8000/chat"
OCR_API_URL = "http://localhost:8000/analyze-image"

async def get_chat_response_async(query: str) -> str:
    async with httpx.AsyncClient() as client:
        r = await client.post(CHAT_API_URL, json={"query": query})
        r.raise_for_status()
        return r.json()["text"]

import os
import base64
import aiohttp
import sqlite3
from typing import List, Dict, Union

CAPTION_API_URL = "http://localhost:8000/analyze-image"
FIXED_PROMPT = (
    "–¥–∞–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞—á—Ç–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å, —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–∏–º, "
    "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–µ–¥–º–µ—Ç|–±–∞–ª–ª|–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —Ä–∞–∑–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö"
)

async def get_ocr_response_async(image_path: str, prompt: str = FIXED_PROMPT) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ OCR-—Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    if not os.path.isfile(image_path):
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
    with open(image_path, "rb") as f:
        image_bytes = f.read()
    image_base64 = base64.b64encode(image_bytes).decode("utf-8")
    payload = {
        "image_base64": image_base64,
        "prompt": prompt,
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(CAPTION_API_URL, json=payload) as resp:
            resp.raise_for_status()
            resp_json = await resp.json()
            return resp_json.get("text", "")

def process_text(text: str, db_path: str = "../schedule.db") -> Union[str, List[Dict]]:
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ —à–∞–±–ª–æ–Ω—É –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã.
    """
    lines = [line.strip() for line in text.strip().split('\n') if line.strip()]
    for line in lines:
        if line.count('|') != 2:
            return "–≤—Å–µ —Ö–æ—Ä–æ—à–æ"

    result = []
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    for line in lines:
        subject, score_str, full_name = [part.strip() for part in line.split('|')]
        try:
            score = float(score_str.replace(",", "."))
        except ValueError:
            score = 0.0
        reason = "–Ω–µ–¥–æ–±–æ—Ä –±–∞–ª–ª–æ–≤" if score < 40 else "–ø—Ä–æ–≤–∞–ª–µ–Ω —ç–∫–∑–∞–º–µ–Ω"
        cursor.execute("""
            SELECT day_of_week, time_range, room, contact FROM schedule WHERE full_name = ?
        """, (full_name,))
        row = cursor.fetchone()
        if row:
            day_of_week, time_range, room, contact = row
            meeting_info = {
                "–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏": day_of_week,
                "–≤—Ä–µ–º—è": time_range,
                "–∞—É–¥–∏—Ç–æ—Ä–∏—è": room,
                "–∫–æ–Ω—Ç–∞–∫—Ç": contact
            }
        else:
            meeting_info = {
                "–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏": "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                "–≤—Ä–µ–º—è": "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                "–∞—É–¥–∏—Ç–æ—Ä–∏—è": "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                "–∫–æ–Ω—Ç–∞–∫—Ç": "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            }
        entry = {
            "–ø—Ä–µ–¥–º–µ—Ç": subject,
            "–±–∞–ª–ª": score,
            "–ø—Ä–∏—á–∏–Ω–∞": reason,
            "–º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏": meeting_info,
            "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å": full_name
        }
        result.append(entry)
    conn.close()
    return result

def format_for_telegram(entries: Union[str, List[Dict]]) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π HTML-—Ç–µ–∫—Å—Ç –¥–ª—è Telegram –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    if isinstance(entries, str):
        return entries  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "–≤—Å–µ —Ö–æ—Ä–æ—à–æ"
    message_lines = []
    for entry in entries:
        lines = [
            f"üéì <b>{entry['–ø—Ä–µ–¥–º–µ—Ç']}</b>",
            f"üèÖ <b>–ë–∞–ª–ª: {entry['–±–∞–ª–ª']}</b>",
            f"{'‚ùóÔ∏è' if entry['–ø—Ä–∏—á–∏–Ω–∞'] == '–Ω–µ–¥–æ–±–æ—Ä –±–∞–ª–ª–æ–≤' else '‚ùå'} <i>–ü—Ä–∏—á–∏–Ω–∞: {entry['–ø—Ä–∏—á–∏–Ω–∞']}</i>",
            f"üë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {entry['–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']}",
            f"üìç <u>–ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏</u>:",
            f"   üìÜ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {entry['–º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏']['–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏']}",
            f"   ‚è∞ –í—Ä–µ–º—è: {entry['–º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏']['–≤—Ä–µ–º—è']}",
            f"   üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {entry['–º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏']['–∞—É–¥–∏—Ç–æ—Ä–∏—è']}",
            f"   ‚úâÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç: {entry['–º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏']['–∫–æ–Ω—Ç–∞–∫—Ç']}",
        ]
        message_lines.append('\n'.join(lines))
        message_lines.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    return "\n\n".join(message_lines)

async def analyze_image_and_format(image_path: str, db_path: str = "schedule.db") -> str:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–∞:
    1. OCR, 2. –ü–∞—Ä—Å–∏–Ω–≥, 3. –ë–î, 4. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ Telegram
    """
    text = await get_ocr_response_async(image_path)
    if not text:
        return "‚ùå –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"
    entries = process_text(text, db_path)
    return format_for_telegram(entries)
